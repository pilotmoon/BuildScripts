#!/bin/zsh
set -eu; base=${0:a:h}/..; source $base/common

# save or load the environment variables
memo_vars vars_archive

# switch to our working dir
cd_temp_dir

# select export options file based on target
case ${${=TARGET_NAME}[-1]:u} {
  MAS ) options_plist=ExportOptions_MAS.plist ;;
  SA|* ) options_plist=ExportOptions_SA.plist ;;
}

options_path=${base}/xcode/$options_plist; show options_path
[[ -f $options_path ]] || { print "bad options_path"; exit 1 }

# export app from xcode
export_path=$(pwd)/export; show export_path
print '* exporting archive...'
/usr/bin/xcodebuild -exportArchive -archivePath $ARCHIVE_PATH -exportOptionsPlist $options_path -exportPath $export_path -allowProvisioningUpdates

# get app info
print '* examining exported info.plist...'
info() { /usr/libexec/PlistBuddy -c "Print :$1" $export_path/$INFOPLIST_PATH }
version=$(info CFBundleShortVersionString)
build=$(info CFBundleVersion)
bundle_id=$(info CFBundleIdentifier)
channel=$(info PilotmoonReleaseChannel)
edition=$(info PilotmoonReleaseEdition)
min_system=$(info LSMinimumSystemVersion)
show version build bundle_id channel edition min_system

# construct naming slug for zip files
print '* constructing slug...'
slug_version=$version
slug_label=''
if [[ $edition == MAS ]]; then
  slug_label='-MAS'
  if [[ $channel == Production ]]; then
    slug_version=$(info PilotmoonInternalVersionString)
  fi
fi
product=${PRODUCT_NAME}; show product
slug=${product:gs/ /}${slug_label}-${slug_version:l:gs/ /-}; show slug

# make dsyms zip
dsyms_zip=${PWD}/${slug}-dSYM.zip; show dsyms_zip
print -n "* zipping dsyms..."
/usr/bin/ditto -c -k $ARCHIVE_DSYMS_PATH $dsyms_zip
print "done"

# make app zip
app_path=${export_path}/${PRODUCT_NAME}.app; show app_path
app_zip=${PWD}/${slug}.zip; show app_zip
print -n "* zipping app..."
/usr/bin/ditto -c -k --keepParent $app_path $app_zip
print "done"

# storage path
storage_path="$PILOTMOON_APPBUILDS_LOCATION/$product/($build) $product $version"

# save the zip to storage?
if [[ $channel == $channel_prod || $channel == $channel_beta ]]; then
    # copy app and dsyms
  print "* creating storage_path: $storage_path"
  mkdir -p $storage_path

  dsyms_dest=$storage_path/${dsyms_zip:t}
  print "* saving dsyms to $dsyms_dest"
  cp -f $dsyms_zip $dsyms_dest 
  
  if [[ $edition == $edition_mas ]]; then 
    zip_dest=$storage_path/${app_zip:t}
  else 
    zip_dest=$storage_path/notstapled-${app_zip:t}
  fi
  print "* saving zip to $zip_dest"
  cp -f $app_zip $zip_dest  
else 
  print "* not saving to storage (channel: $channel)"
fi

# save vars to json file
save_info edition slug app_path app_zip dsyms_zip version build channel bundle_id min_system product storage_path
