#!/bin/zsh
set -eu; base=${0:a:h}/..; source $base/common; cd_info

allow_unstapled=no # f = allow unstapled builds?
while getopts 'u' c; do
  case $c in
    u) allow_unstapled=yes ;;
  esac
done

# load vars
load_info product app_zip version build channel edition slug min_system verified 
[[ $allow_unstapled == yes ]] || load_info stapled

# get zip file eddsa signature and size
signature_response=$($base/bin/sign_update $app_zip)
[[ $signature_response =~ '^sparkle:edSignature=\"(.+)\" length=\"(.+)\"$' ]] || { print "signature output not in expected format: $signature_response"; exit 1 }
signature=$match[1]
size=$match[2]
show size signature
save_info size signature

# make jekyll template for appcast
metafile=$(date +%F)-$slug.md; show metafile
show PWD

if [[ -f ./rnotes.md ]]; then
  notes=$(<./rnotes.md)
else
  notes="Your notes here."
fi

# build releases metadata file for Jekyll site 
cat <<END > $metafile  
---
layout: appcast
date: $(date +'%F %H:00:00 %z')
product: $product
channel: $channel
version: $build
filename: ${app_zip:t}
short_version_string: '$version'
size: $size
eddsa_signature: '$signature'
minimum_system_version: '$min_system'
published: no
---

$notes

END

# preserve existing file
meta_dest=$PILOTMOON_WWW_RELEASES_LOCATION/$metafile
if [[ -f $meta_dest ]]; then
  meta_backup=$PILOTMOON_WWW_RELEASES_LOCATION/_${metafile}.backup-$(uuid)
  print "* copying existing metafile to $meta_backup"
  mv $meta_dest $meta_backup
fi

# copy to destination
print "* copying metafile to $meta_dest"
cp $metafile $meta_dest

# copy zip to downloads location
downloads=$PILOTMOON_WWW_DOWNLOADS_LOCATION
if [[ $channel == $channel_beta ]]; then
  downloads=$downloads/beta
fi
print "* placing zip in $downloads"
cp -f $app_zip $downloads

published=1; save_info published

